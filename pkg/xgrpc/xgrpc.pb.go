// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: xgrpc.proto

package xgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_xgrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_xgrpc_proto_rawDescGZIP(), []int{0}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_xgrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_xgrpc_proto_rawDescGZIP(), []int{1}
}

func (x *ID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time     int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Owner    int64  `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Side     int64  `protobuf:"varint,4,opt,name=side,proto3" json:"side,omitempty"`
	Type     int64  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Price    string `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	Quantity string `protobuf:"bytes,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	FeeRate  int64  `protobuf:"varint,8,opt,name=feeRate,proto3" json:"feeRate,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_xgrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_xgrpc_proto_rawDescGZIP(), []int{2}
}

func (x *Ticket) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ticket) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Ticket) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *Ticket) GetSide() int64 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *Ticket) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Ticket) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Ticket) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *Ticket) GetFeeRate() int64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason        string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	ReasonTable   string `protobuf:"bytes,2,opt,name=reasonTable,proto3" json:"reasonTable,omitempty"`
	ReasonID      int64  `protobuf:"varint,3,opt,name=reasonID,proto3" json:"reasonID,omitempty"`
	Owner         int64  `protobuf:"varint,4,opt,name=owner,proto3" json:"owner,omitempty"`
	FreeChange    string `protobuf:"bytes,5,opt,name=freeChange,proto3" json:"freeChange,omitempty"`
	FreezeChange  string `protobuf:"bytes,6,opt,name=freezeChange,proto3" json:"freezeChange,omitempty"`
	Owner2        int64  `protobuf:"varint,7,opt,name=owner2,proto3" json:"owner2,omitempty"`
	FreeChange2   string `protobuf:"bytes,8,opt,name=freeChange2,proto3" json:"freeChange2,omitempty"`
	FreezeChange2 string `protobuf:"bytes,9,opt,name=freezeChange2,proto3" json:"freezeChange2,omitempty"`
	ReasonIDFirst int64  `protobuf:"varint,10,opt,name=reasonIDFirst,proto3" json:"reasonIDFirst,omitempty"`
}

func (x *BalanceChange) Reset() {
	*x = BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChange) ProtoMessage() {}

func (x *BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_xgrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChange.ProtoReflect.Descriptor instead.
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return file_xgrpc_proto_rawDescGZIP(), []int{3}
}

func (x *BalanceChange) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BalanceChange) GetReasonTable() string {
	if x != nil {
		return x.ReasonTable
	}
	return ""
}

func (x *BalanceChange) GetReasonID() int64 {
	if x != nil {
		return x.ReasonID
	}
	return 0
}

func (x *BalanceChange) GetOwner() int64 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *BalanceChange) GetFreeChange() string {
	if x != nil {
		return x.FreeChange
	}
	return ""
}

func (x *BalanceChange) GetFreezeChange() string {
	if x != nil {
		return x.FreezeChange
	}
	return ""
}

func (x *BalanceChange) GetOwner2() int64 {
	if x != nil {
		return x.Owner2
	}
	return 0
}

func (x *BalanceChange) GetFreeChange2() string {
	if x != nil {
		return x.FreeChange2
	}
	return ""
}

func (x *BalanceChange) GetFreezeChange2() string {
	if x != nil {
		return x.FreezeChange2
	}
	return ""
}

func (x *BalanceChange) GetReasonIDFirst() int64 {
	if x != nil {
		return x.ReasonIDFirst
	}
	return 0
}

var File_xgrpc_proto protoreflect.FileDescriptor

var file_xgrpc_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x78,
	0x67, 0x72, 0x70, 0x63, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x32, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x32, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x46, 0x69, 0x72, 0x73, 0x74, 0x32, 0x6b, 0x0a, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x09, 0x2e, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44,
	0x1a, 0x0d, 0x2e, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x30,
	0x01, 0x12, 0x35, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x78, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x09, 0x2e, 0x78, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x44, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x78,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xgrpc_proto_rawDescOnce sync.Once
	file_xgrpc_proto_rawDescData = file_xgrpc_proto_rawDesc
)

func file_xgrpc_proto_rawDescGZIP() []byte {
	file_xgrpc_proto_rawDescOnce.Do(func() {
		file_xgrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_xgrpc_proto_rawDescData)
	})
	return file_xgrpc_proto_rawDescData
}

var file_xgrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_xgrpc_proto_goTypes = []interface{}{
	(*String)(nil),        // 0: xgrpc.String
	(*ID)(nil),            // 1: xgrpc.ID
	(*Ticket)(nil),        // 2: xgrpc.Ticket
	(*BalanceChange)(nil), // 3: xgrpc.BalanceChange
}
var file_xgrpc_proto_depIdxs = []int32{
	1, // 0: xgrpc.BankService.Tickets:input_type -> xgrpc.ID
	3, // 1: xgrpc.BankService.BalanceChanges:input_type -> xgrpc.BalanceChange
	2, // 2: xgrpc.BankService.Tickets:output_type -> xgrpc.Ticket
	1, // 3: xgrpc.BankService.BalanceChanges:output_type -> xgrpc.ID
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_xgrpc_proto_init() }
func file_xgrpc_proto_init() {
	if File_xgrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xgrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xgrpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_xgrpc_proto_goTypes,
		DependencyIndexes: file_xgrpc_proto_depIdxs,
		MessageInfos:      file_xgrpc_proto_msgTypes,
	}.Build()
	File_xgrpc_proto = out.File
	file_xgrpc_proto_rawDesc = nil
	file_xgrpc_proto_goTypes = nil
	file_xgrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BankServiceClient interface {
	// ome 向 bank 发起请求，根据最新 id，通过流持续获取新 ticket
	Tickets(ctx context.Context, in *ID, opts ...grpc.CallOption) (BankService_TicketsClient, error)
	// ome 向 bank 发起请求，每次 bank 发送 id 过来，ome 根据 id 推送后续的请求
	BalanceChanges(ctx context.Context, opts ...grpc.CallOption) (BankService_BalanceChangesClient, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) Tickets(ctx context.Context, in *ID, opts ...grpc.CallOption) (BankService_TicketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BankService_serviceDesc.Streams[0], "/xgrpc.BankService/Tickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankServiceTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BankService_TicketsClient interface {
	Recv() (*Ticket, error)
	grpc.ClientStream
}

type bankServiceTicketsClient struct {
	grpc.ClientStream
}

func (x *bankServiceTicketsClient) Recv() (*Ticket, error) {
	m := new(Ticket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankServiceClient) BalanceChanges(ctx context.Context, opts ...grpc.CallOption) (BankService_BalanceChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BankService_serviceDesc.Streams[1], "/xgrpc.BankService/BalanceChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankServiceBalanceChangesClient{stream}
	return x, nil
}

type BankService_BalanceChangesClient interface {
	Send(*BalanceChange) error
	Recv() (*ID, error)
	grpc.ClientStream
}

type bankServiceBalanceChangesClient struct {
	grpc.ClientStream
}

func (x *bankServiceBalanceChangesClient) Send(m *BalanceChange) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bankServiceBalanceChangesClient) Recv() (*ID, error) {
	m := new(ID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankServiceServer is the server API for BankService service.
type BankServiceServer interface {
	// ome 向 bank 发起请求，根据最新 id，通过流持续获取新 ticket
	Tickets(*ID, BankService_TicketsServer) error
	// ome 向 bank 发起请求，每次 bank 发送 id 过来，ome 根据 id 推送后续的请求
	BalanceChanges(BankService_BalanceChangesServer) error
}

// UnimplementedBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (*UnimplementedBankServiceServer) Tickets(*ID, BankService_TicketsServer) error {
	return status.Errorf(codes.Unimplemented, "method Tickets not implemented")
}
func (*UnimplementedBankServiceServer) BalanceChanges(BankService_BalanceChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method BalanceChanges not implemented")
}

func RegisterBankServiceServer(s *grpc.Server, srv BankServiceServer) {
	s.RegisterService(&_BankService_serviceDesc, srv)
}

func _BankService_Tickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankServiceServer).Tickets(m, &bankServiceTicketsServer{stream})
}

type BankService_TicketsServer interface {
	Send(*Ticket) error
	grpc.ServerStream
}

type bankServiceTicketsServer struct {
	grpc.ServerStream
}

func (x *bankServiceTicketsServer) Send(m *Ticket) error {
	return x.ServerStream.SendMsg(m)
}

func _BankService_BalanceChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BankServiceServer).BalanceChanges(&bankServiceBalanceChangesServer{stream})
}

type BankService_BalanceChangesServer interface {
	Send(*ID) error
	Recv() (*BalanceChange, error)
	grpc.ServerStream
}

type bankServiceBalanceChangesServer struct {
	grpc.ServerStream
}

func (x *bankServiceBalanceChangesServer) Send(m *ID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bankServiceBalanceChangesServer) Recv() (*BalanceChange, error) {
	m := new(BalanceChange)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xgrpc.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tickets",
			Handler:       _BankService_Tickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BalanceChanges",
			Handler:       _BankService_BalanceChanges_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xgrpc.proto",
}
